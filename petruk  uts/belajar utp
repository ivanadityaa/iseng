#include <iostream>
#include <cstring>

using namespace std;

// deklarasi struct
struct Mahasiswa {
    char nama[50];
    int umur;
};

// deklarasi function
void printMahasiswa(Mahasiswa *mhsPtr) {
    cout << "Nama: " << mhsPtr->nama << endl;
    cout << "Umur: " << mhsPtr->umur << endl;
}

int main() {
    // inisialisasi struct
    Mahasiswa mhs1;
    strcpy(mhs1.nama, "John Doe");
    mhs1.umur = 20;

    // deklarasi pointer
    Mahasiswa *mhsPtr;

    // assign pointer ke alamat struct
    mhsPtr = &mhs1;

    // panggil function dengan pointer sebagai parameter
    printMahasiswa(mhsPtr);

    return 0;
}


//Pada kodingan di atas, terdapat deklarasi struct Mahasiswa yang memiliki dua anggota yaitu nama dan umur. Kemudian, terdapat deklarasi function printMahasiswa yang menerima parameter berupa pointer ke struct Mahasiswa.

//Di dalam function main, terdapat inisialisasi struct Mahasiswa dengan nama mhs1 dan nilai anggota-anggotanya diisi dengan strcpy dan operator =. Kemudian, terdapat deklarasi pointer mhsPtr dan assign pointer tersebut ke alamat struct mhs1 dengan operator &.
//
//Terakhir, function printMahasiswa dipanggil dengan menggunakan pointer mhsPtr sebagai parameter. Di dalam function printMahasiswa, nilai anggota-anggota struct diakses menggunakan operator -> dan kemudian diprint ke layar menggunakan cout.
//
//Kodingan di atas juga menggunakan library cstring untuk menggunakan function strcpy yang digunakan untuk meng-copy string ke array of char.

//#include <iostream>
//#include <cstring>
//
//using namespace std;
//
//// deklarasi struct
//struct Person {
//    char name[50];
//    int age;
//};
//
//// deklarasi function
//void printPerson(Person* personPtr) {
//    cout << "Name: " << personPtr->name << endl;
//    cout << "Age: " << personPtr->age << endl;
//}
//
//int main() {
//    // inisialisasi struct
//    Person person1 = {"Alice", 25};
//
//    // deklarasi pointer dan assign pointer ke alamat struct
//    Person* personPtr = &person1;
//
//    // panggil function dengan pointer sebagai parameter
//    printPerson(personPtr);
//
//    return 0;
//}
//
//deklarasi struct Person yang memiliki dua anggota yaitu name dan age. Kemudian, terdapat deklarasi function printPerson yang menerima parameter berupa pointer ke struct Person.
//
//Di dalam function main, terdapat inisialisasi struct Person dengan nama person1 dan nilai anggota-anggotanya diisi secara langsung menggunakan kurung kurawal {}. Kemudian, terdapat deklarasi pointer personPtr dan assign pointer tersebut ke alamat struct person1 dengan operator &.
//
//Terakhir, function printPerson dipanggil dengan menggunakan pointer personPtr sebagai parameter. Di dalam function printPerson, nilai anggota-anggota struct diakses menggunakan operator -> dan kemudian diprint ke layar menggunakan cout.
//
////
////
//
//#include <iostream>
//#include <cstring>
//
//using namespace std;
//
//struct Mahasiswa {
//    char nama[50];
//    int umur;
//    float ipk;
//};
//
//void tambahMahasiswa(Mahasiswa* mhs, const char* nama, int umur, float ipk) {
//    strcpy(mhs->nama, nama);
//    mhs->umur = umur;
//    mhs->ipk = ipk;
//}
//
//void printMahasiswa(const Mahasiswa* mhs) {
//    cout << "Nama: " << mhs->nama << endl;
//    cout << "Umur: " << mhs->umur << endl;
//    cout << "IPK: " << mhs->ipk << endl;
//}
//
//int main() {
//    Mahasiswa mhs1;
//    tambahMahasiswa(&mhs1, "John Doe", 20, 3.5);
//    printMahasiswa(&mhs1);
//
//    Mahasiswa mhs2;
//    tambahMahasiswa(&mhs2, "Jane Doe", 22, 3.8);
//    printMahasiswa(&mhs2);
//
//    return 0;
//}
//
//Terdapat struct Mahasiswa yang memiliki atribut nama, umur, dan ipk.
//Terdapat function tambahMahasiswa yang menerima pointer ke objek Mahasiswa dan mengisi atribut-atributnya dengan data yang diberikan.
//Terdapat function printMahasiswa yang menerima pointer ke objek Mahasiswa dan mencetak atribut-atributnya ke layar.
//Dalam fungsi main, terdapat dua objek Mahasiswa yang diisi menggunakan function tambahMahasiswa dan dicetak menggunakan function printMahasiswa.
